From 28e833d13d16e0043abcfa6ee5fb7bf4e7e0b309 Mon Sep 17 00:00:00 2001
From: Prathamesh <tanavadep@gmail.com>
Date: Sat, 8 Jul 2023 02:00:27 -0400
Subject: [PATCH] Update

---
 0001-Update.patch  |  50 ++++++++++++++++
 client_test.py     |  44 +++++++++++++-
 multi_commit.patch | 141 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 234 insertions(+), 1 deletion(-)
 create mode 100644 0001-Update.patch
 create mode 100644 multi_commit.patch

diff --git a/0001-Update.patch b/0001-Update.patch
new file mode 100644
index 0000000..fe9220a
--- /dev/null
+++ b/0001-Update.patch
@@ -0,0 +1,50 @@
+From 0323d5763f25520a18a77e5a7263b2fe1fa3b2ff Mon Sep 17 00:00:00 2001
+From: Prathamesh <tanavadep@gmail.com>
+Date: Sat, 8 Jul 2023 01:10:34 -0400
+Subject: [PATCH] Update
+
+---
+ client3.py | 12 ++++++++----
+ 1 file changed, 8 insertions(+), 4 deletions(-)
+
+diff --git a/client3.py b/client3.py
+index 3fc09b7..1ea6c18 100644
+--- a/client3.py
++++ b/client3.py
+@@ -35,25 +35,29 @@ def getDataPoint(quote):
+     stock = quote['stock']
+     bid_price = float(quote['top_bid']['price'])
+     ask_price = float(quote['top_ask']['price'])
+-    price = bid_price
++    price = (bid_price + ask_price)/2
+     return stock, bid_price, ask_price, price
+ 
+ 
+ def getRatio(price_a, price_b):
+     """ Get ratio of price_a and price_b """
+     """ ------------- Update this function ------------- """
+-    return 1
++    if (price_b==0):
++        return 0
++    return price_a/price_b
+ 
+ 
+ # Main
+ if __name__ == "__main__":
+     # Query the price once every N seconds.
++    
+     for _ in iter(range(N)):
+         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+ 
+-        """ ----------- Update to get the ratio --------------- """
++        prices={}
+         for quote in quotes:
+             stock, bid_price, ask_price, price = getDataPoint(quote)
++            prices[stock]=price
+             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+ 
+-        print("Ratio %s" % getRatio(price, price))
++        print("Ratio %s" % getRatio(prices['ABC'], prices['DEF']))
+-- 
+2.39.2
+
diff --git a/client_test.py b/client_test.py
index af2bf26..19ae64b 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,6 @@
 import unittest
 from client3 import getDataPoint
+from client3 import getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -7,7 +8,8 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+       self.assertEqual(getDataPoint(quote), (quote['stock'],quote['top_bid']['price'],quote['top_ask']['price'],(quote['top_bid']['price']+quote['top_ask']['price'])/2))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,9 +17,49 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+       self.assertEqual(getDataPoint(quote), (quote['stock'],quote['top_bid']['price'],quote['top_ask']['price'],(quote['top_bid']['price']+quote['top_ask']['price'])/2))
 
 
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio_def0(self):
+     prices=[
+        {'ABC':120},
+        {'DEF':0} 
+      ]
+     
+     for n in prices:
+        self.assertEqual(getRatio(prices['ABC'],prices['DEF']), (prices['ABC']/prices['DEF']))
+
+  def test_getRatio_abc0(self):
+     prices=[
+        {'ABC':0},
+        {'DEF':120}
+     ]
+     
+     for price in prices:
+        self.assertEqual(getRatio(prices['ABC'],prices['DEF']), (prices['ABC']/prices['DEF']))
+
+  def test_getRatio_both0(self):
+     prices=[
+        {'ABC':0},
+        {'DEF':0}
+     ]
+     
+     for price in prices:
+        self.assertEqual(getRatio(prices['ABC'],prices['DEF']), (prices['ABC']/prices['DEF']))
+
+  def test_getRatio(self):
+     prices=[
+        {'ABC':120},
+        {'DEF':60}
+     ]
+     
+     for price in prices:
+        self.assertEqual(getRatio(prices['ABC'],prices['DEF']), (prices['ABC']/prices['DEF']))
+
+
+
 
 
 
diff --git a/multi_commit.patch b/multi_commit.patch
new file mode 100644
index 0000000..1f821aa
--- /dev/null
+++ b/multi_commit.patch
@@ -0,0 +1,141 @@
+From bd3f50e4d3e3eb0d620411dddd7ef054702c5e52 Mon Sep 17 00:00:00 2001
+From: josiahdc <josiah.chapman@gmail.com>
+Date: Wed, 5 Oct 2022 12:54:37 -0700
+Subject: [PATCH 1/4] Added Requirements
+
+---
+ requirements.txt | 1 +
+ 1 file changed, 1 insertion(+)
+ create mode 100644 requirements.txt
+
+diff --git a/requirements.txt b/requirements.txt
+new file mode 100644
+index 0000000..f678e82
+--- /dev/null
++++ b/requirements.txt
+@@ -0,0 +1 @@
++python-dateutil==2.8.2
+\ No newline at end of file
+-- 
+2.39.2
+
+
+From 24707a7c3f267047838c97f07e5ff52284f7be6a Mon Sep 17 00:00:00 2001
+From: Joe Ferrer <joe@theforage.com>
+Date: Wed, 1 Mar 2023 00:10:28 +1100
+Subject: [PATCH 2/4] Rename client and server files
+
+---
+ client.py => client3.py | 0
+ server.py => server3.py | 0
+ 2 files changed, 0 insertions(+), 0 deletions(-)
+ rename client.py => client3.py (100%)
+ rename server.py => server3.py (100%)
+
+diff --git a/client.py b/client3.py
+similarity index 100%
+rename from client.py
+rename to client3.py
+diff --git a/server.py b/server3.py
+similarity index 100%
+rename from server.py
+rename to server3.py
+-- 
+2.39.2
+
+
+From 879221fec2b863d37d5b493f02a530a8098ef6ef Mon Sep 17 00:00:00 2001
+From: Joe Ferrer <joe@theforage.com>
+Date: Wed, 1 Mar 2023 00:11:51 +1100
+Subject: [PATCH 3/4] Re-add sample unit test
+
+---
+ client_test.py | 25 +++++++++++++++++++++++++
+ 1 file changed, 25 insertions(+)
+ create mode 100644 client_test.py
+
+diff --git a/client_test.py b/client_test.py
+new file mode 100644
+index 0000000..af2bf26
+--- /dev/null
++++ b/client_test.py
+@@ -0,0 +1,25 @@
++import unittest
++from client3 import getDataPoint
++
++class ClientTest(unittest.TestCase):
++  def test_getDataPoint_calculatePrice(self):
++    quotes = [
++      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++    ]
++    """ ------------ Add the assertion below ------------ """
++
++  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
++    quotes = [
++      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++    ]
++    """ ------------ Add the assertion below ------------ """
++
++
++  """ ------------ Add more unit tests ------------ """
++
++
++
++if __name__ == '__main__':
++    unittest.main()
+-- 
+2.39.2
+
+
+From 0323d5763f25520a18a77e5a7263b2fe1fa3b2ff Mon Sep 17 00:00:00 2001
+From: Prathamesh <tanavadep@gmail.com>
+Date: Sat, 8 Jul 2023 01:10:34 -0400
+Subject: [PATCH 4/4] Update
+
+---
+ client3.py | 12 ++++++++----
+ 1 file changed, 8 insertions(+), 4 deletions(-)
+
+diff --git a/client3.py b/client3.py
+index 3fc09b7..1ea6c18 100644
+--- a/client3.py
++++ b/client3.py
+@@ -35,25 +35,29 @@ def getDataPoint(quote):
+     stock = quote['stock']
+     bid_price = float(quote['top_bid']['price'])
+     ask_price = float(quote['top_ask']['price'])
+-    price = bid_price
++    price = (bid_price + ask_price)/2
+     return stock, bid_price, ask_price, price
+ 
+ 
+ def getRatio(price_a, price_b):
+     """ Get ratio of price_a and price_b """
+     """ ------------- Update this function ------------- """
+-    return 1
++    if (price_b==0):
++        return 0
++    return price_a/price_b
+ 
+ 
+ # Main
+ if __name__ == "__main__":
+     # Query the price once every N seconds.
++    
+     for _ in iter(range(N)):
+         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+ 
+-        """ ----------- Update to get the ratio --------------- """
++        prices={}
+         for quote in quotes:
+             stock, bid_price, ask_price, price = getDataPoint(quote)
++            prices[stock]=price
+             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+ 
+-        print("Ratio %s" % getRatio(price, price))
++        print("Ratio %s" % getRatio(prices['ABC'], prices['DEF']))
+-- 
+2.39.2
+
-- 
2.39.2

